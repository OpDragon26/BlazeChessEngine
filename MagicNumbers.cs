namespace Blaze;

public static class MagicNumbers
{
    // generate a magic number with a push of at least 48
    // reused code from my previous attempt
    public static (ulong magicNumber, int push, int highest) GenerateMagicNumber(ulong[] combinations)
    {
        ulong magicNumber;
        int push = 0;

        ulong[] results = new ulong[combinations.Length];

        while (true) // keep generating magic numbers until one is found
        {
            // generate random ulong
            ulong candidateNumber = RandomUlong();

            // multiply every combination with the magic number and push them right by 48, only leaving the leftmost 16 bits
            for (int i = 0; i < combinations.Length; i++)
            {
                results[i] = (combinations[i] * candidateNumber) >> 46;
            }

            // if the result array contains duplicates, the number isn't magic, so don't bother checking it for further pushes
            if (!results.GroupBy(x => x).Any(g => g.Count() > 1))
            {
                ulong[] temp = (ulong[])results.Clone();

                for (int i = 0; i < 16; i++)
                {
                    // push further right by a certain amount, and check for duplicates again
                    for (int j = 0; j < temp.Length; j++)
                    {
                        temp[j] >>= 1;
                    }

                    // if there are no duplicates in temp
                    if (!temp.GroupBy(x => x).Any(g => g.Count() > 1))
                    {
                        if (i == 0)
                            continue;
                        for (int j = 0; j < results.Length; j++)
                        {
                            results[j] >>= 1;
                        }

                        push++;
                    }
                    else break;

                }

                magicNumber = candidateNumber;
                break;
            }
        }

        return (magicNumber, push + 46, (int)results.Max());
    }

    public static (ulong magicNumber, int push, int highest)[,] Presets(string type)
    {
        return type == "rook" ? RookNumbers : BishopNumbers;
    }

    public static (ulong magicNumber, int push, int highest) GenerateRepeat(ulong[] combinations, int iterations)
    {
        (ulong magicNumber, int push, int highest) magicNumber = (0, 0, 0);
        
        for (int i = 0; i < iterations; i++)
        {
            (ulong magicNumber, int push, int highest) New = GenerateMagicNumber(combinations);
            if (New.push > magicNumber.push || (New.push == magicNumber.push && New.highest < magicNumber.highest))
                magicNumber = New;
        }
        
        return magicNumber;
    }
    
    private static Random RandGen = new();
    
    private static ulong RandomUlong()
    {
        while (true)
        {
            var buffer = new byte[sizeof(ulong)];
            RandGen.NextBytes(buffer);
            return BitConverter.ToUInt64(buffer, 0);
        }
    }
    
    public static (ulong magicNumber, int push, int highest)[,] RookNumbers =
    {
        {
            (9923146022150792333, 47, 131063), (7668639886525986227, 47, 131063), (3629133785401589564, 47, 131068),
            (8706199993787762013, 47, 131067), (4396951879642956839, 47, 131069), (7885189970349236347, 47, 131069),
            (8990451101724604215, 47, 131061), (16059615410457403175, 47, 131056)
        },
        {
            (10712629561810192067, 47, 131068), (14843800520682277201, 47, 131056), (6285520896410588276, 47, 131055),
            (8270101362211238580, 47, 131067), (8229251433712028980, 47, 131069), (5726635721214408384, 47, 131064),
            (7471020051712059711, 47, 131060), (17312941723611444032, 47, 131057)
        },
        {
            (10715252403639884213, 47, 131062), (11409318459344639724, 47, 131068), (2222750398276542267, 47, 131062),
            (7753106238748319563, 47, 131056), (6691691767285863855, 47, 131051), (7877962418500077873, 47, 131067),
            (16993505339122534095, 47, 131067), (4967773378019534508, 47, 131070)
        },
        {
            (11963741368578664693, 47, 131066), (13474550921401300912, 47, 131050), (17340298881836925584, 47, 131064),
            (5411817082414614704, 47, 131053), (8794041926648487619, 47, 131060), (16067264871037795984, 47, 131070),
            (13910088726049108097, 47, 131070), (17506012352560819798, 47, 131061)
        },
        {
            (10864742200142962995, 47, 131063), (12608786547983708161, 47, 131068), (4683822216344260380, 47, 131070),
            (14021165370022003016, 47, 131061), (12410192527782123140, 47, 131070), (7777158592475981146, 47, 131063),
            (7346486222795146463, 47, 131060), (17589453255629190735, 47, 131068)
        },
        {
            (11590144183714373861, 47, 131067), (3521610362190403860, 47, 131060), (10491928793291436471, 47, 131070),
            (4408591932620834412, 47, 131070), (13950220737264665292, 47, 131067), (13098831028647604330, 47, 131064),
            (8831035641484358884, 47, 131058), (10233972736420509612, 47, 131066)
        },
        {
            (3716118917611328159, 47, 131068), (4343630920230470798, 47, 131059), (8293045590004304366, 47, 131070),
            (13644446753367196113, 47, 131055), (351468507416230794, 47, 131070), (13133405702460555318, 47, 131050),
            (9463629074782913314, 47, 131070), (16725758379878316038, 47, 131054)
        },
        {
            (13163919743207779162, 47, 131061), (2801036098447367307, 47, 131070), (544047300546714195, 47, 131058),
            (491686857891303791, 47, 131056), (6433024462075745127, 47, 131065), (1779621975361617255, 47, 131070),
            (12515787739068253761, 47, 131068), (11308302871681451565, 47, 131070)
        }
    };

    public static (ulong magicNumber, int push, int highest)[,] BishopNumbers =
    {
        {
            (10984437588327355704, 51, 8188), (7006058535829348525, 52, 4044), (14906122406994150172, 49, 32619),
            (2066184340015723333, 51, 8150), (1035297900335743484, 52, 4091), (16607782446796926046, 51, 8156),
            (1247444761181602811, 50, 16171), (15870182710494725, 52, 4082)
        },
        {
            (4603830292560296292, 49, 32693), (15855686154953055350, 49, 32707), (7251151001245687602, 47, 130314),
            (16114471141749563029, 51, 8176), (11401233933306946887, 47, 131070), (7195318184353575418, 50, 16367),
            (1649467647888140695, 48, 65305), (11124515084308147271, 51, 8177)
        },
        {
            (11070954177618850525, 53, 2039), (12428895035525312174, 48, 65447), (3141906513735950133, 47, 131021),
            (1970064370294220711, 47, 131024), (2348266627463219689, 47, 130967), (9653558686444912649, 47, 131026),
            (3182850852236480546, 48, 65428), (14615239119142771435, 49, 32443)
        },
        {
            (10973662793716665623, 53, 2030), (9641991183283297038, 48, 65287), (6334974661080060926, 47, 131048),
            (13260876134096857530, 47, 131054), (9398778627118995277, 47, 131053),
            (12206312023251063905, 47, 131070),
            (2084885181953242666, 47, 129879), (16814179508889275684, 52, 4093)
        },
        {
            (16484429464892923043, 52, 4076), (13829589210862379486, 49, 32760), (2596932861749656247, 47, 131040),
            (6043126200206940745, 47, 131031), (12535698615780334274, 47, 131055),
            (15886806933826500261, 47, 130966),
            (1092213874886853380, 50, 16356), (16477038996506879131, 49, 32754)
        },
        {
            (10150045531924313354, 51, 8106), (17054948454648592514, 48, 65528), (17345459729335561269, 47, 130834),
            (13621686841573233274, 47, 131070), (18160237639046435887, 47, 130946),
            (14602156085682375156, 47, 130968),
            (12104214529036088946, 49, 32764), (8861481076252219696, 52, 4091)
        },
        {
            (11410533049506724456, 51, 8046), (8297625402410663567, 48, 65467), (2373818184025873052, 50, 16343),
            (15252246013694177531, 47, 130730), (8797671975670280739, 50, 16358), (2976335728957827031, 47, 130861),
            (18145425317785678925, 49, 32446), (9579073613274333698, 49, 32682)
        },
        {
            (11809129073957181761, 48, 65534), (15444082618789063762, 53, 2034), (17793945967432013766, 52, 4090),
            (13606051810055179660, 51, 8017), (4523306322104149711, 50, 16381), (12569790028625216797, 50, 16350),
            (15377014312014850010, 51, 8169), (16665806180439125489, 50, 16326)
        }
    };
}